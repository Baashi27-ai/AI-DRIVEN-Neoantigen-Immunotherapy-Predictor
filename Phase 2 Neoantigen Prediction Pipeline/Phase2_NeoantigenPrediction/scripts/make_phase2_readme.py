#!/usr/bin/env python3
from pathlib import Path
import pandas as pd

base = Path(__file__).resolve().parent.parent
work = base / "work"
results = base / "results"
out_readme = base / "Phase2_README.md"

def safe_count_tsv(path, sep="\t"):
    if not path.exists():
        return None
    try:
        return sum(1 for _ in open(path, "r", encoding="utf-8")) - 1
    except Exception:
        try:
            return pd.read_csv(path, sep=sep).shape[0]
        except Exception:
            return None

def main():
    n_cand = safe_count_tsv(work / "neoantigen_candidates.tsv")
    n_bind = safe_count_tsv(work / "mhcflurry_binding.tsv", sep=",")

    def exist(p: Path): return "✅" if p.exists() else "❌"

    text = f"""# Phase 2 · Neoantigen Prediction Pipeline (Mini README)

Predict patient-specific neoantigen candidates using *MHCflurry* binding + presentation, then apply biological filters.

---

## Inputs
- inputs/variant_info/somatic_mutations.tsv
- inputs/variant_info/mutations_with_expression.tsv
- inputs/expression/expression_tpm.tsv
- inputs/hla/hla_types.tsv

---

## Method (quick)
1) Derive 8–11mer peptides from expressed mutations  
2) Predict:
   - Binding affinity (MHCflurry)
   - Processing / presentation (MHCflurry presentation models)
3) Filter: *affinity < 500 nM, **VAF ≥ 0.1, **expression confirmed*
4) QC plots

---

## Outputs
- work/neoantigen_candidates.tsv {f"(n={n_cand})" if n_cand is not None else ""}
- work/mhcflurry_binding.tsv {f"(rows={n_bind})" if n_bind is not None else ""}
- results/binding_affinity_histogram.png {exist(results / "binding_affinity_histogram.png")}
- results/peptide_length_distribution.png {exist(results / "peptide_length_distribution.png")}
- results/peptide_filtering_flowchart.png {exist(results / "peptide_filtering_flowchart.png")}

---

## Quick preview
<img src="results/binding_affinity_histogram.png" width="420"/>  
<img src="results/peptide_length_distribution.png" width="420"/>  
<img src="results/peptide_filtering_flowchart.png" width="420"/>

---

_This file is auto-generated by scripts/make_phase2_readme.py._
"""
    out_readme.write_text(text, encoding="utf-8")
    print(f"[OK] Phase2 README generated -> {out_readme}")

if __name__ == "__main__":
    main()
